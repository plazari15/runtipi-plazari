name: Build Docker Images

on:
  push:
    branches: [ main ]
    paths: 
      - 'apps/*/Dockerfile'
      - 'apps/*/docker-compose.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'apps/*/Dockerfile'
      - 'apps/*/docker-compose.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: plazari15

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect apps with Dockerfiles
        id: detect
        run: |
          # Find all directories in apps/ that contain a Dockerfile
          apps_with_dockerfiles=()
          
          for app_dir in apps/*/; do
            if [ -f "${app_dir}Dockerfile" ]; then
              app_name=$(basename "$app_dir")
              apps_with_dockerfiles+=("$app_name")
            fi
          done
          
          # Create JSON matrix for GitHub Actions
          if [ ${#apps_with_dockerfiles[@]} -eq 0 ]; then
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "No apps with Dockerfiles found"
          else
            matrix_json=$(printf '%s\n' "${apps_with_dockerfiles[@]}" | jq -R . | jq -s -c 'map({app: .})')
            echo "matrix={\"include\":$matrix_json}" >> $GITHUB_OUTPUT
            echo "Found apps with Dockerfiles: ${apps_with_dockerfiles[*]}"
          fi

  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.matrix != '{"include":[]}'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from Dockerfile
        id: version
        run: |
          if [ -f "./apps/${{ matrix.app }}/Dockerfile" ]; then
            # Extract version from ARG PAPERLESS_VERSION or similar patterns
            version=$(grep -E '^ARG.*VERSION=' "./apps/${{ matrix.app }}/Dockerfile" | head -1 | sed -E 's/^ARG.*VERSION=([^[:space:]]+).*/\1/')
            if [ -z "$version" ]; then
              # Fallback: try to extract version from FROM line
              version=$(grep -E '^FROM.*:' "./apps/${{ matrix.app }}/Dockerfile" | head -1 | sed -E 's/.*:([^[:space:]]+).*/\1/')
            fi
            if [ -n "$version" ] && [ "$version" != "latest" ]; then
              echo "version=$version" >> $GITHUB_OUTPUT
              echo "Found version: $version"
            else
              echo "version=" >> $GITHUB_OUTPUT
              echo "No specific version found, using default tags"
            fi
          else
            echo "version=" >> $GITHUB_OUTPUT
            echo "No Dockerfile found"
          fi

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != '' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        continue-on-error: true
        with:
          context: ./apps/${{ matrix.app }}
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            PAPERLESS_VERSION=${{ steps.version.outputs.version }}
          provenance: false
          sbom: false

      - name: Retry push if failed
        if: steps.build.outcome == 'failure'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 4
          retry_wait_seconds: 30
          command: |
            # Re-build and push using cache (should be fast)
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --build-arg PAPERLESS_VERSION=${{ steps.version.outputs.version }} \
              --cache-from type=gha \
              --push \
              --provenance=false \
              --sbom=false \
              $(echo "${{ steps.meta.outputs.tags }}" | sed 's/^/-t /' | tr '\n' ' ') \
              $(echo "${{ steps.meta.outputs.labels }}" | sed 's/^/--label /' | tr '\n' ' ') \
              ./apps/${{ matrix.app }}

      - name: Output image URL
        run: |
          echo "::notice title=Image Built::Successfully built and pushed ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.app }}"
